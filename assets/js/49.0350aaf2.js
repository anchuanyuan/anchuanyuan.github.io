(window.webpackJsonp=window.webpackJsonp||[]).push([[49],{443:function(s,a,t){"use strict";t.r(a);var n=t(0),e=Object(n.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"javascript基础02-运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#javascript基础02-运算符"}},[s._v("#")]),s._v(" JavaScript基础02-运算符")]),s._v(" "),a("h2",{attrs:{id:"_1-运算符-操作符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-运算符-操作符"}},[s._v("#")]),s._v(" 1 - 运算符（操作符）")]),s._v(" "),a("h3",{attrs:{id:"_1-1-运算符的分类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-运算符的分类"}},[s._v("#")]),s._v(" 1.1 运算符的分类")]),s._v(" "),a("p",[a("strong",[s._v("运算符")]),s._v("（operator）也被称为操作符，是用于实现赋值、比较和执行算数运算等功能的符号。")]),s._v(" "),a("p",[s._v("JavaScript中常用的运算符有：")]),s._v(" "),a("ul",[a("li",[s._v("算数运算符")]),s._v(" "),a("li",[s._v("递增和递减运算符")]),s._v(" "),a("li",[s._v("比较运算符")]),s._v(" "),a("li",[s._v("逻辑运算符")]),s._v(" "),a("li",[s._v("赋值运算符")])]),s._v(" "),a("h3",{attrs:{id:"_1-2-算数运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-算数运算符"}},[s._v("#")]),s._v(" 1.2 算数运算符")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("算术运算符概述")]),s._v(" "),a("p",[s._v("概念：算术运算使用的符号，用于执行两个变量或值的算术运算。")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/anchuanyuan/TuChuangForITX/main/image/202006/20/013712-477886.png",alt:""}})])]),s._v(" "),a("li",[a("p",[s._v("浮点数的精度问题")]),s._v(" "),a("p",[s._v("浮点数值的最高精度是 17 位小数，但在进行算术计算时其精确度远远不如整数。")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" result "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 结果不是 0.3，而是：0.30000000000000004")]),s._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.07")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 结果不是 7，  而是：7.000000000000001")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("所以：不要直接判断两个浮点数是否相等 !")])]),s._v(" "),a("li",[a("p",[s._v("表达式和返回值")]),s._v(" "),a("p",[s._v("表达式：是由数字、运算符、变量等以能求得数值的有意义排列方法所得的组合")]),s._v(" "),a("p",[s._v("简单理解：是由数字、运算符、变量等组成的式子")]),s._v(" "),a("p",[s._v("表达式最终都会有一个结果，返回给开发者，称为返回值")])])]),s._v(" "),a("h3",{attrs:{id:"_1-3-递增和递减运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-递增和递减运算符"}},[s._v("#")]),s._v(" 1.3 递增和递减运算符")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("递增和递减运算符概述")]),s._v(" "),a("p",[s._v("如果需要反复给数字变量添加或减去1，可以使用递增（++）和递减（ -- ）运算符来完成。")])])]),s._v(" "),a("p",[s._v("在 JavaScript 中，递增（++）和递减（ -- ）既可以放在变量前面，也可以放在变量后面。放在变量前面时，我们可以称为前置递增（递减）运算符，放在变量后面时，我们可以称为后置递增（递减）运算符。")]),s._v(" "),a("p",[s._v("注意：递增和递减运算符必须和变量配合使用。")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("递增运算符")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("前置递增运算符")]),s._v(" "),a("p",[s._v("++num 前置递增，就是自加1，类似于 num =  num + 1，但是 ++num 写起来更简单。")]),s._v(" "),a("p",[s._v("使用口诀：先自加，后返回值")])])]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v("  num "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),s._v("num "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 21")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("ul",[a("li",[a("p",[s._v("后置递增运算符")]),s._v(" "),a("p",[s._v("num++ 后置递增，就是自加1，类似于 num =  num + 1 ，但是 num++ 写起来更简单。")]),s._v(" "),a("p",[s._v("使用口诀：先返回原值，后自加")])])]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v("  num "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" num"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 20")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])])])]),s._v(" "),a("h3",{attrs:{id:"_1-4-比较运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-比较运算符"}},[s._v("#")]),s._v(" 1.4 比较运算符")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("比较运算符概述")]),s._v(" "),a("p",[s._v("概念：比较运算符（关系运算符）是两个数据进行比较时所使用的运算符，比较运算后，会返回一个布尔值（true / false）作为比较运算的结果。")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/anchuanyuan/TuChuangForITX/main/image/202006/20/013720-347486.png",alt:""}})])]),s._v(" "),a("li",[a("p",[s._v("等号比较")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/anchuanyuan/TuChuangForITX/main/image/202006/20/013722-312558.png",alt:""}})]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[s._v("console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("18")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'18'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("18")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("===")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'18'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])])])]),s._v(" "),a("h3",{attrs:{id:"_1-5-逻辑运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-逻辑运算符"}},[s._v("#")]),s._v(" 1.5 逻辑运算符")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("逻辑运算符概述")]),s._v(" "),a("p",[s._v("概念：逻辑运算符是用来进行布尔值运算的运算符，其返回值也是布尔值。后面开发中经常用于多个条件的判断")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/anchuanyuan/TuChuangForITX/main/image/202006/20/013725-893455.png",alt:""}})])]),s._v(" "),a("li",[a("p",[s._v("逻辑与&&")]),s._v(" "),a("p",[s._v("两边都是 true才返回 true，否则返回 false")]),s._v(" "),a("p",[s._v("​           "),a("img",{attrs:{src:"https://raw.githubusercontent.com/anchuanyuan/TuChuangForITX/main/image/202006/20/013955-787489.png",alt:"1592588395186"}})]),s._v(" "),a("p",[s._v("​         "),a("img",{attrs:{src:"https://raw.githubusercontent.com/anchuanyuan/TuChuangForITX/main/image/202006/20/014010-265922.png",alt:"1592588410715"}})])]),s._v(" "),a("li",[a("p",[s._v("逻辑或 ||")]),s._v(" "),a("p",[s._v("两边都是 true才返回 true，否则返回 false")]),s._v(" "),a("p",[s._v("​        "),a("img",{attrs:{src:"https://raw.githubusercontent.com/anchuanyuan/TuChuangForITX/main/image/202006/20/014118-804453.png",alt:""}})])]),s._v(" "),a("li",[a("p",[s._v("逻辑非 ！")]),s._v(" "),a("p",[s._v("逻辑非（!）也叫作取反符，用来取一个布尔值相反的值，如 true 的相反值是 false")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" isOk "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("isOk"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// false")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])])]),s._v(" "),a("li",[a("p",[s._v("短路运算（逻辑中断）")]),s._v(" "),a("p",[s._v("短路运算的原理：当有多个表达式（值）时,左边的表达式值可以确定结果时,就不再继续运算右边的表达式的值;")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("逻辑与")]),s._v(" "),a("p",[s._v("语法： 表达式1 && 表达式2")])])])]),s._v(" "),a("li",[a("p",[s._v("如果第一个表达式的值为真，则返回表达式2")])]),s._v(" "),a("li",[a("p",[s._v("如果第一个表达式的值为假，则返回表达式1")])])]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[s._v("console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("123")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("456")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 456")]),s._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("456")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("          "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 0")]),s._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("123")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("456")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("789")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 789")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("ul",[a("li",[s._v("逻辑或")])]),s._v(" "),a("p",[s._v("语法： 表达式1 || 表达式2")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("如果第一个表达式的值为真，则返回表达式1")])]),s._v(" "),a("li",[a("p",[s._v("如果第一个表达式的值为假，则返回表达式2")])])]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[s._v("console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("123")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("||")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("456")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("         "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//  123")]),s._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("||")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("456")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("          "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//  456")]),s._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("123")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("||")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("456")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("||")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("789")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//  123")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("h3",{attrs:{id:"_1-6-赋值运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-6-赋值运算符"}},[s._v("#")]),s._v(" 1.6 赋值运算符")]),s._v(" "),a("p",[s._v("概念：用来把数据赋值给变量的运算符。")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/anchuanyuan/TuChuangForITX/main/image/202006/20/014047-45908.png",alt:""}})]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" age "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nage "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 相当于 age = age + 5;")]),s._v("\nage "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 相当于 age = age - 5;")]),s._v("\nage "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 相当于 age = age * 10;")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("h3",{attrs:{id:"_1-7-运算符优先级"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-7-运算符优先级"}},[s._v("#")]),s._v(" 1.7 运算符优先级")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/anchuanyuan/TuChuangForITX/main/image/202006/20/014049-74502.png",alt:""}})]),s._v(" "),a("ul",[a("li",[s._v("一元运算符里面的逻辑非优先级很高")]),s._v(" "),a("li",[s._v("逻辑与比逻辑或优先级高")])]),s._v(" "),a("h2",{attrs:{id:"_2-流程控制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-流程控制"}},[s._v("#")]),s._v(" 2 - 流程控制")]),s._v(" "),a("h3",{attrs:{id:"_2-1-流程控制概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-流程控制概念"}},[s._v("#")]),s._v(" 2.1 流程控制概念")]),s._v(" "),a("p",[s._v("在一个程序执行的过程中，各条代码的执行顺序对程序的结果是有直接影响的。很多时候我们要通过控制代码的执行顺序来实现我们要完成的功能。")]),s._v(" "),a("p",[s._v("简单理解："),a("strong",[s._v("流程控制就是来控制代码按照一定结构顺序来执行")])]),s._v(" "),a("p",[s._v("流程控制主要有三种结构，分别是"),a("strong",[s._v("顺序结构")]),s._v("、"),a("strong",[s._v("分支结构")]),s._v("和"),a("strong",[s._v("循环结构")]),s._v("，代表三种代码执行的顺序。")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/anchuanyuan/TuChuangForITX/main/image/202006/20/014055-971209.png",alt:""}})]),s._v(" "),a("h3",{attrs:{id:"_2-2-顺序流程控制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-顺序流程控制"}},[s._v("#")]),s._v(" 2.2 顺序流程控制")]),s._v(" "),a("p",[s._v("顺序结构是程序中最简单、最基本的流程控制，它没有特定的语法结构，程序会按照代码的先后顺序，依次执行，程序中大多数的代码都是这样执行的。\n​                "),a("img",{attrs:{src:"https://raw.githubusercontent.com/anchuanyuan/TuChuangForITX/main/image/202006/20/014212-872175.png",alt:"1592588530373"}})]),s._v(" "),a("h3",{attrs:{id:"_2-3-分支流程控制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-分支流程控制"}},[s._v("#")]),s._v(" 2.3 分支流程控制")]),s._v(" "),a("ul",[a("li",[s._v("分支结构")])]),s._v(" "),a("p",[s._v("由上到下执行代码的过程中，根据不同的条件，执行不同的路径代码（执行代码多选一的过程），从而得到不同的结果\n"),a("img",{attrs:{src:"https://raw.githubusercontent.com/anchuanyuan/TuChuangForITX/main/image/202006/20/014229-179247.png",alt:"1592588545596"}})]),s._v(" "),a("p",[s._v("JS 语言提供了两种分支结构语句：if 语句、switch 语句")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("if 语句")]),s._v(" "),a("ul",[a("li",[s._v("语法结构")])]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 条件成立执行代码，否则什么也不做")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("条件表达式"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 条件成立执行的代码语句")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("语句可以理解为一个行为，循环语句和分支语句就是典型的语句。一个程序由很多个语句组成，一般情况下，会分割成一个一个的语句。")]),s._v(" "),a("ul",[a("li",[s._v("执行流程")])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/anchuanyuan/TuChuangForITX/main/image/202006/20/014242-389269.png",alt:""}})])]),s._v(" "),a("li",[a("p",[s._v("if else语句（双分支语句）")]),s._v(" "),a("ul",[a("li",[s._v("语法结构")])]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 条件成立  执行 if 里面代码，否则执行else 里面的代码")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("条件表达式"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// [如果] 条件成立执行的代码")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// [否则] 执行的代码")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("ul",[a("li",[s._v("执行流程")])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/anchuanyuan/TuChuangForITX/main/image/202006/20/014251-976763.png",alt:""}})])]),s._v(" "),a("li",[a("p",[s._v("if else if 语句(多分支语句)")]),s._v(" "),a("ul",[a("li",[s._v("语法结构")])]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 适合于检查多重条件。")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("条件表达式"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    语句"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("；\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("条件表达式"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    语句"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("；\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("条件表达式"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    语句"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("；\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("...")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 上述条件都不成立执行此处代码")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("ul",[a("li",[s._v("执行逻辑")])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/anchuanyuan/TuChuangForITX/main/image/202006/20/014254-845495.png",alt:""}})])])]),s._v(" "),a("h3",{attrs:{id:"_2-4-三元表达式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-三元表达式"}},[s._v("#")]),s._v(" 2.4 三元表达式")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("语法结构")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[s._v("表达式"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),s._v(" 表达式"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" 表达式"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])])]),s._v(" "),a("li",[a("p",[s._v("执行思路")]),s._v(" "),a("ul",[a("li",[s._v("如果表达式1为 true ，则返回表达式2的值，如果表达式1为 false，则返回表达式3的值")]),s._v(" "),a("li",[s._v("简单理解： 就类似于  if  else （双分支） 的简写")])])])]),s._v(" "),a("h3",{attrs:{id:"_2-5-switch分支流程控制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-switch分支流程控制"}},[s._v("#")]),s._v(" 2.5 switch分支流程控制")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("语法结构")]),s._v(" "),a("p",[s._v("switch 语句也是多分支语句，它用于基于不同的条件来执行不同的代码。当要针对变量设置一系列的特定值的选项时，就可以使用 switch。")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("switch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" 表达式 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" \n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("case")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[s._v("value1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 表达式 等于 value1 时要执行的代码")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("break")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("case")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[s._v("value2")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 表达式 等于 value2 时要执行的代码")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("break")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("default")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 表达式 不等于任何一个 value 时要执行的代码")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("ul",[a("li",[a("p",[s._v("switch ：开关 转换  ， case ：小例子   选项")])]),s._v(" "),a("li",[a("p",[s._v("关键字 switch 后面括号内可以是表达式或值， 通常是一个变量")])]),s._v(" "),a("li",[a("p",[s._v("关键字 case , 后跟一个选项的表达式或值，后面跟一个冒号")])]),s._v(" "),a("li",[a("p",[s._v("switch 表达式的值会与结构中的 case 的值做比较")])]),s._v(" "),a("li",[a("p",[s._v("如果存在匹配全等(===) ，则与该 case 关联的代码块会被执行，并在遇到 break 时停止，整个 switch 语句代码执行结束")])]),s._v(" "),a("li",[a("p",[s._v("如果所有的 case 的值都和表达式的值不匹配，则执行 default 里的代码")]),s._v(" "),a("p",[a("strong",[s._v("注意： 执行case 里面的语句时，如果没有break，则继续执行下一个case里面的语句。")])])])])]),s._v(" "),a("li",[a("p",[s._v("switch 语句和 if else if 语句的区别")]),s._v(" "),a("ul",[a("li",[s._v("一般情况下，它们两个语句可以相互替换")]),s._v(" "),a("li",[s._v("switch...case 语句通常处理 case为比较确定值的情况， 而 if…else…语句更加灵活，常用于范围判断(大于、等于某个范围)")]),s._v(" "),a("li",[s._v("switch 语句进行条件判断后直接执行到程序的条件语句，效率更高。而if…else 语句有几种条件，就得判断多少次。")]),s._v(" "),a("li",[s._v("当分支比较少时，if… else语句的执行效率比 switch语句高。")]),s._v(" "),a("li",[s._v("当分支比较多时，switch语句的执行效率比较高，而且结构更清晰。")])])])])])}),[],!1,null,null,null);a.default=e.exports}}]);